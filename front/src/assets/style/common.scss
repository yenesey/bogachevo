
/**********************************************
             Responsible grid 
***********************************************/
// breakpoints map
$breakpoints: (
  xs: 32rem,
  sm: 48rem,
  md: 72rem,
  lg: 96rem,
  xl: 102rem,
  xx: 120rem
);

// number of columns variable
$column-count: 12;

// media query mixin
@mixin break($size, $min-max) {
  @media (#{$min-max}-width: $size) {
    @content;
  }
}

// loop over the breakpoints
@each $key, $value in $breakpoints {
  @for $i from 1 through $column-count {
    .col-#{$key}-span-#{$i} {
      flex: 0 0 100%;
      @include break($value, 'min') {
        flex: 0 0 #{$i / $column-count * 100%};
      }
    }
    .col-#{$key}-offset-#{$i} {
      @include break($value, 'min') {
        margin-left: ($i / $column-count * 100%);
      }
    }
  }

  @include break($value - 1, 'max') {
    .hidden-#{$key}-down {
      display: none !important;
    }
  }

  @include break($value, 'min') {
    .hidden-#{$key}-up {
      display: none !important;
    }
  }
}

// grid row
.grid-row {
  display: flex;
  flex-flow: row wrap;
}

/**********************************************

***********************************************/

// generic transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
      -o-transform: $transforms;
     -ms-transform: $transforms;
 -webkit-transform: $transforms;
       transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
@include transform(rotate(#{$deg}));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
@include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
@include transform(skew(#{$x}, #{$y}));
}
//transform origin
@mixin transform-origin ($origin) {
 moz-transform-origin: $origin;
      -o-transform-origin: $origin;
     -ms-transform-origin: $origin;
 -webkit-transform-origin: $origin;
       transform-origin: $origin;
}

