
/**********************************************
               Responsible grid 
***********************************************/
// BREAKPOINTS map
$BREAKPOINTS: (
  xs: 32rem,
  sm: 48rem,
  md: 72rem,
  lg: 96rem,
  xl: 102rem,
  xx: 120rem
);

// number of columns variable
$COLUMN-COUNT: 12;

// media query mixin
@mixin break($size, $min-max: 'max') {
  $_size: if(type-of($size) == number, $size , map-get($BREAKPOINTS, $size));
  @media (#{$min-max}-width: $_size) {
    @content;
  }
}

// loop over the BREAKPOINTS
@each $key, $value in $BREAKPOINTS {
  .#{$key}{
    flex: 0 0 100%;
  }
  @include break($value, 'min') {
    .#{$key}{
      @for $i from 1 through $COLUMN-COUNT {
        &.span-#{$i} {
            flex: 0 0 #{$i / $COLUMN-COUNT * 100%};
        }
        &.offset-#{$i} {
            margin-left: #{$i / $COLUMN-COUNT * 100%};
        }
      }
    }
  }
  @include break($value, 'max') {
    .hidden-#{$key}-down {
      display: none !important;
    }
  }
  @include break($value, 'min') {
    .hidden-#{$key}-up {
      display: none !important;
    }
  } 
}

// grid row
.grid-row {
  display: flex;
  flex-flow: row wrap;
  width: 100%;
}

/**********************************************
            Transform mixins
***********************************************/

// generic transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
      -o-transform: $transforms;
     -ms-transform: $transforms;
 -webkit-transform: $transforms;
       transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
  @include transform(skew(#{$x}, #{$y}));
}
//transform origin
@mixin transform-origin ($origin) {
 moz-transform-origin: $origin;
      -o-transform-origin: $origin;
     -ms-transform-origin: $origin;
 -webkit-transform-origin: $origin;
       transform-origin: $origin;
}


/**********************************************
            Transition mixins
***********************************************/

@mixin transition($transition...) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}
@mixin transition-property($property...) {
  -moz-transition-property:    $property;
  -o-transition-property:      $property;
  -webkit-transition-property: $property;
  transition-property:         $property;
}
@mixin transition-duration($duration...) {
  -moz-transition-property:    $duration;
  -o-transition-property:      $duration;
  -webkit-transition-property: $duration;
  transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
  -moz-transition-timing-function:    $timing;
  -o-transition-timing-function:      $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}
